// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PlayState.proto

#ifndef PROTOBUF_INCLUDED_PlayState_2eproto
#define PROTOBUF_INCLUDED_PlayState_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_PlayState_2eproto 

namespace protobuf_PlayState_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_PlayState_2eproto
namespace state {
class HitState;
class HitStateDefaultTypeInternal;
extern HitStateDefaultTypeInternal _HitState_default_instance_;
class PlayState;
class PlayStateDefaultTypeInternal;
extern PlayStateDefaultTypeInternal _PlayState_default_instance_;
class TransformProto;
class TransformProtoDefaultTypeInternal;
extern TransformProtoDefaultTypeInternal _TransformProto_default_instance_;
class Vector3Proto;
class Vector3ProtoDefaultTypeInternal;
extern Vector3ProtoDefaultTypeInternal _Vector3Proto_default_instance_;
class WorldState;
class WorldStateDefaultTypeInternal;
extern WorldStateDefaultTypeInternal _WorldState_default_instance_;
}  // namespace state
namespace google {
namespace protobuf {
template<> ::state::HitState* Arena::CreateMaybeMessage<::state::HitState>(Arena*);
template<> ::state::PlayState* Arena::CreateMaybeMessage<::state::PlayState>(Arena*);
template<> ::state::TransformProto* Arena::CreateMaybeMessage<::state::TransformProto>(Arena*);
template<> ::state::Vector3Proto* Arena::CreateMaybeMessage<::state::Vector3Proto>(Arena*);
template<> ::state::WorldState* Arena::CreateMaybeMessage<::state::WorldState>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace state {

// ===================================================================

class Vector3Proto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:state.Vector3Proto) */ {
 public:
  Vector3Proto();
  virtual ~Vector3Proto();

  Vector3Proto(const Vector3Proto& from);

  inline Vector3Proto& operator=(const Vector3Proto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3Proto(Vector3Proto&& from) noexcept
    : Vector3Proto() {
    *this = ::std::move(from);
  }

  inline Vector3Proto& operator=(Vector3Proto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3Proto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3Proto* internal_default_instance() {
    return reinterpret_cast<const Vector3Proto*>(
               &_Vector3Proto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector3Proto* other);
  friend void swap(Vector3Proto& a, Vector3Proto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3Proto* New() const final {
    return CreateMaybeMessage<Vector3Proto>(NULL);
  }

  Vector3Proto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector3Proto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector3Proto& from);
  void MergeFrom(const Vector3Proto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3Proto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:state.Vector3Proto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PlayState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TransformProto : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:state.TransformProto) */ {
 public:
  TransformProto();
  virtual ~TransformProto();

  TransformProto(const TransformProto& from);

  inline TransformProto& operator=(const TransformProto& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TransformProto(TransformProto&& from) noexcept
    : TransformProto() {
    *this = ::std::move(from);
  }

  inline TransformProto& operator=(TransformProto&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TransformProto& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransformProto* internal_default_instance() {
    return reinterpret_cast<const TransformProto*>(
               &_TransformProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TransformProto* other);
  friend void swap(TransformProto& a, TransformProto& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TransformProto* New() const final {
    return CreateMaybeMessage<TransformProto>(NULL);
  }

  TransformProto* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TransformProto>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TransformProto& from);
  void MergeFrom(const TransformProto& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformProto* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .state.Vector3Proto position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::state::Vector3Proto& _internal_position() const;
  public:
  const ::state::Vector3Proto& position() const;
  ::state::Vector3Proto* release_position();
  ::state::Vector3Proto* mutable_position();
  void set_allocated_position(::state::Vector3Proto* position);

  // .state.Vector3Proto rotation = 2;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 2;
  private:
  const ::state::Vector3Proto& _internal_rotation() const;
  public:
  const ::state::Vector3Proto& rotation() const;
  ::state::Vector3Proto* release_rotation();
  ::state::Vector3Proto* mutable_rotation();
  void set_allocated_rotation(::state::Vector3Proto* rotation);

  // .state.Vector3Proto scale = 3;
  bool has_scale() const;
  void clear_scale();
  static const int kScaleFieldNumber = 3;
  private:
  const ::state::Vector3Proto& _internal_scale() const;
  public:
  const ::state::Vector3Proto& scale() const;
  ::state::Vector3Proto* release_scale();
  ::state::Vector3Proto* mutable_scale();
  void set_allocated_scale(::state::Vector3Proto* scale);

  // @@protoc_insertion_point(class_scope:state.TransformProto)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::state::Vector3Proto* position_;
  ::state::Vector3Proto* rotation_;
  ::state::Vector3Proto* scale_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PlayState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:state.PlayState) */ {
 public:
  PlayState();
  virtual ~PlayState();

  PlayState(const PlayState& from);

  inline PlayState& operator=(const PlayState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayState(PlayState&& from) noexcept
    : PlayState() {
    *this = ::std::move(from);
  }

  inline PlayState& operator=(PlayState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayState* internal_default_instance() {
    return reinterpret_cast<const PlayState*>(
               &_PlayState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayState* other);
  friend void swap(PlayState& a, PlayState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayState* New() const final {
    return CreateMaybeMessage<PlayState>(NULL);
  }

  PlayState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayState& from);
  void MergeFrom(const PlayState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clntName = 7;
  void clear_clntname();
  static const int kClntNameFieldNumber = 7;
  const ::std::string& clntname() const;
  void set_clntname(const ::std::string& value);
  #if LANG_CXX11
  void set_clntname(::std::string&& value);
  #endif
  void set_clntname(const char* value);
  void set_clntname(const char* value, size_t size);
  ::std::string* mutable_clntname();
  ::std::string* release_clntname();
  void set_allocated_clntname(::std::string* clntname);

  // .state.TransformProto transform = 1;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 1;
  private:
  const ::state::TransformProto& _internal_transform() const;
  public:
  const ::state::TransformProto& transform() const;
  ::state::TransformProto* release_transform();
  ::state::TransformProto* mutable_transform();
  void set_allocated_transform(::state::TransformProto* transform);

  // int32 animState = 2;
  void clear_animstate();
  static const int kAnimStateFieldNumber = 2;
  ::google::protobuf::int32 animstate() const;
  void set_animstate(::google::protobuf::int32 value);

  // int32 health = 3;
  void clear_health();
  static const int kHealthFieldNumber = 3;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // int32 killCount = 4;
  void clear_killcount();
  static const int kKillCountFieldNumber = 4;
  ::google::protobuf::int32 killcount() const;
  void set_killcount(::google::protobuf::int32 value);

  // int32 deathCount = 5;
  void clear_deathcount();
  static const int kDeathCountFieldNumber = 5;
  ::google::protobuf::int32 deathcount() const;
  void set_deathcount(::google::protobuf::int32 value);

  // int32 roomId = 6;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 6;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:state.PlayState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clntname_;
  ::state::TransformProto* transform_;
  ::google::protobuf::int32 animstate_;
  ::google::protobuf::int32 health_;
  ::google::protobuf::int32 killcount_;
  ::google::protobuf::int32 deathcount_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PlayState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HitState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:state.HitState) */ {
 public:
  HitState();
  virtual ~HitState();

  HitState(const HitState& from);

  inline HitState& operator=(const HitState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HitState(HitState&& from) noexcept
    : HitState() {
    *this = ::std::move(from);
  }

  inline HitState& operator=(HitState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HitState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HitState* internal_default_instance() {
    return reinterpret_cast<const HitState*>(
               &_HitState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(HitState* other);
  friend void swap(HitState& a, HitState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HitState* New() const final {
    return CreateMaybeMessage<HitState>(NULL);
  }

  HitState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HitState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HitState& from);
  void MergeFrom(const HitState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HitState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  const ::std::string& from() const;
  void set_from(const ::std::string& value);
  #if LANG_CXX11
  void set_from(::std::string&& value);
  #endif
  void set_from(const char* value);
  void set_from(const char* value, size_t size);
  ::std::string* mutable_from();
  ::std::string* release_from();
  void set_allocated_from(::std::string* from);

  // string to = 2;
  void clear_to();
  static const int kToFieldNumber = 2;
  const ::std::string& to() const;
  void set_to(const ::std::string& value);
  #if LANG_CXX11
  void set_to(::std::string&& value);
  #endif
  void set_to(const char* value);
  void set_to(const char* value, size_t size);
  ::std::string* mutable_to();
  ::std::string* release_to();
  void set_allocated_to(::std::string* to);

  // int32 damage = 3;
  void clear_damage();
  static const int kDamageFieldNumber = 3;
  ::google::protobuf::int32 damage() const;
  void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:state.HitState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr from_;
  ::google::protobuf::internal::ArenaStringPtr to_;
  ::google::protobuf::int32 damage_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PlayState_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class WorldState : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:state.WorldState) */ {
 public:
  WorldState();
  virtual ~WorldState();

  WorldState(const WorldState& from);

  inline WorldState& operator=(const WorldState& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorldState(WorldState&& from) noexcept
    : WorldState() {
    *this = ::std::move(from);
  }

  inline WorldState& operator=(WorldState&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WorldState& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldState* internal_default_instance() {
    return reinterpret_cast<const WorldState*>(
               &_WorldState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(WorldState* other);
  friend void swap(WorldState& a, WorldState& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorldState* New() const final {
    return CreateMaybeMessage<WorldState>(NULL);
  }

  WorldState* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorldState>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorldState& from);
  void MergeFrom(const WorldState& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldState* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clntName = 2;
  void clear_clntname();
  static const int kClntNameFieldNumber = 2;
  const ::std::string& clntname() const;
  void set_clntname(const ::std::string& value);
  #if LANG_CXX11
  void set_clntname(::std::string&& value);
  #endif
  void set_clntname(const char* value);
  void set_clntname(const char* value, size_t size);
  ::std::string* mutable_clntname();
  ::std::string* release_clntname();
  void set_allocated_clntname(::std::string* clntname);

  // .state.TransformProto transform = 3;
  bool has_transform() const;
  void clear_transform();
  static const int kTransformFieldNumber = 3;
  private:
  const ::state::TransformProto& _internal_transform() const;
  public:
  const ::state::TransformProto& transform() const;
  ::state::TransformProto* release_transform();
  ::state::TransformProto* mutable_transform();
  void set_allocated_transform(::state::TransformProto* transform);

  // .state.HitState hitState = 7;
  bool has_hitstate() const;
  void clear_hitstate();
  static const int kHitStateFieldNumber = 7;
  private:
  const ::state::HitState& _internal_hitstate() const;
  public:
  const ::state::HitState& hitstate() const;
  ::state::HitState* release_hitstate();
  ::state::HitState* mutable_hitstate();
  void set_allocated_hitstate(::state::HitState* hitstate);

  // int32 roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 health = 5;
  void clear_health();
  static const int kHealthFieldNumber = 5;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // bool fired = 4;
  void clear_fired();
  static const int kFiredFieldNumber = 4;
  bool fired() const;
  void set_fired(bool value);

  // bool hit = 6;
  void clear_hit();
  static const int kHitFieldNumber = 6;
  bool hit() const;
  void set_hit(bool value);

  // int32 killPoint = 8;
  void clear_killpoint();
  static const int kKillPointFieldNumber = 8;
  ::google::protobuf::int32 killpoint() const;
  void set_killpoint(::google::protobuf::int32 value);

  // int32 deathPoint = 9;
  void clear_deathpoint();
  static const int kDeathPointFieldNumber = 9;
  ::google::protobuf::int32 deathpoint() const;
  void set_deathpoint(::google::protobuf::int32 value);

  // int32 animState = 10;
  void clear_animstate();
  static const int kAnimStateFieldNumber = 10;
  ::google::protobuf::int32 animstate() const;
  void set_animstate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:state.WorldState)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clntname_;
  ::state::TransformProto* transform_;
  ::state::HitState* hitstate_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 health_;
  bool fired_;
  bool hit_;
  ::google::protobuf::int32 killpoint_;
  ::google::protobuf::int32 deathpoint_;
  ::google::protobuf::int32 animstate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_PlayState_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3Proto

// float x = 1;
inline void Vector3Proto::clear_x() {
  x_ = 0;
}
inline float Vector3Proto::x() const {
  // @@protoc_insertion_point(field_get:state.Vector3Proto.x)
  return x_;
}
inline void Vector3Proto::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:state.Vector3Proto.x)
}

// float y = 2;
inline void Vector3Proto::clear_y() {
  y_ = 0;
}
inline float Vector3Proto::y() const {
  // @@protoc_insertion_point(field_get:state.Vector3Proto.y)
  return y_;
}
inline void Vector3Proto::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:state.Vector3Proto.y)
}

// float z = 3;
inline void Vector3Proto::clear_z() {
  z_ = 0;
}
inline float Vector3Proto::z() const {
  // @@protoc_insertion_point(field_get:state.Vector3Proto.z)
  return z_;
}
inline void Vector3Proto::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:state.Vector3Proto.z)
}

// -------------------------------------------------------------------

// TransformProto

// .state.Vector3Proto position = 1;
inline bool TransformProto::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void TransformProto::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::state::Vector3Proto& TransformProto::_internal_position() const {
  return *position_;
}
inline const ::state::Vector3Proto& TransformProto::position() const {
  const ::state::Vector3Proto* p = position_;
  // @@protoc_insertion_point(field_get:state.TransformProto.position)
  return p != NULL ? *p : *reinterpret_cast<const ::state::Vector3Proto*>(
      &::state::_Vector3Proto_default_instance_);
}
inline ::state::Vector3Proto* TransformProto::release_position() {
  // @@protoc_insertion_point(field_release:state.TransformProto.position)
  
  ::state::Vector3Proto* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::state::Vector3Proto* TransformProto::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::state::Vector3Proto>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:state.TransformProto.position)
  return position_;
}
inline void TransformProto::set_allocated_position(::state::Vector3Proto* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:state.TransformProto.position)
}

// .state.Vector3Proto rotation = 2;
inline bool TransformProto::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void TransformProto::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::state::Vector3Proto& TransformProto::_internal_rotation() const {
  return *rotation_;
}
inline const ::state::Vector3Proto& TransformProto::rotation() const {
  const ::state::Vector3Proto* p = rotation_;
  // @@protoc_insertion_point(field_get:state.TransformProto.rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::state::Vector3Proto*>(
      &::state::_Vector3Proto_default_instance_);
}
inline ::state::Vector3Proto* TransformProto::release_rotation() {
  // @@protoc_insertion_point(field_release:state.TransformProto.rotation)
  
  ::state::Vector3Proto* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::state::Vector3Proto* TransformProto::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::state::Vector3Proto>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:state.TransformProto.rotation)
  return rotation_;
}
inline void TransformProto::set_allocated_rotation(::state::Vector3Proto* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:state.TransformProto.rotation)
}

// .state.Vector3Proto scale = 3;
inline bool TransformProto::has_scale() const {
  return this != internal_default_instance() && scale_ != NULL;
}
inline void TransformProto::clear_scale() {
  if (GetArenaNoVirtual() == NULL && scale_ != NULL) {
    delete scale_;
  }
  scale_ = NULL;
}
inline const ::state::Vector3Proto& TransformProto::_internal_scale() const {
  return *scale_;
}
inline const ::state::Vector3Proto& TransformProto::scale() const {
  const ::state::Vector3Proto* p = scale_;
  // @@protoc_insertion_point(field_get:state.TransformProto.scale)
  return p != NULL ? *p : *reinterpret_cast<const ::state::Vector3Proto*>(
      &::state::_Vector3Proto_default_instance_);
}
inline ::state::Vector3Proto* TransformProto::release_scale() {
  // @@protoc_insertion_point(field_release:state.TransformProto.scale)
  
  ::state::Vector3Proto* temp = scale_;
  scale_ = NULL;
  return temp;
}
inline ::state::Vector3Proto* TransformProto::mutable_scale() {
  
  if (scale_ == NULL) {
    auto* p = CreateMaybeMessage<::state::Vector3Proto>(GetArenaNoVirtual());
    scale_ = p;
  }
  // @@protoc_insertion_point(field_mutable:state.TransformProto.scale)
  return scale_;
}
inline void TransformProto::set_allocated_scale(::state::Vector3Proto* scale) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete scale_;
  }
  if (scale) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      scale = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:state.TransformProto.scale)
}

// -------------------------------------------------------------------

// PlayState

// .state.TransformProto transform = 1;
inline bool PlayState::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
inline void PlayState::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
}
inline const ::state::TransformProto& PlayState::_internal_transform() const {
  return *transform_;
}
inline const ::state::TransformProto& PlayState::transform() const {
  const ::state::TransformProto* p = transform_;
  // @@protoc_insertion_point(field_get:state.PlayState.transform)
  return p != NULL ? *p : *reinterpret_cast<const ::state::TransformProto*>(
      &::state::_TransformProto_default_instance_);
}
inline ::state::TransformProto* PlayState::release_transform() {
  // @@protoc_insertion_point(field_release:state.PlayState.transform)
  
  ::state::TransformProto* temp = transform_;
  transform_ = NULL;
  return temp;
}
inline ::state::TransformProto* PlayState::mutable_transform() {
  
  if (transform_ == NULL) {
    auto* p = CreateMaybeMessage<::state::TransformProto>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:state.PlayState.transform)
  return transform_;
}
inline void PlayState::set_allocated_transform(::state::TransformProto* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transform = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:state.PlayState.transform)
}

// int32 animState = 2;
inline void PlayState::clear_animstate() {
  animstate_ = 0;
}
inline ::google::protobuf::int32 PlayState::animstate() const {
  // @@protoc_insertion_point(field_get:state.PlayState.animState)
  return animstate_;
}
inline void PlayState::set_animstate(::google::protobuf::int32 value) {
  
  animstate_ = value;
  // @@protoc_insertion_point(field_set:state.PlayState.animState)
}

// int32 health = 3;
inline void PlayState::clear_health() {
  health_ = 0;
}
inline ::google::protobuf::int32 PlayState::health() const {
  // @@protoc_insertion_point(field_get:state.PlayState.health)
  return health_;
}
inline void PlayState::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:state.PlayState.health)
}

// int32 killCount = 4;
inline void PlayState::clear_killcount() {
  killcount_ = 0;
}
inline ::google::protobuf::int32 PlayState::killcount() const {
  // @@protoc_insertion_point(field_get:state.PlayState.killCount)
  return killcount_;
}
inline void PlayState::set_killcount(::google::protobuf::int32 value) {
  
  killcount_ = value;
  // @@protoc_insertion_point(field_set:state.PlayState.killCount)
}

// int32 deathCount = 5;
inline void PlayState::clear_deathcount() {
  deathcount_ = 0;
}
inline ::google::protobuf::int32 PlayState::deathcount() const {
  // @@protoc_insertion_point(field_get:state.PlayState.deathCount)
  return deathcount_;
}
inline void PlayState::set_deathcount(::google::protobuf::int32 value) {
  
  deathcount_ = value;
  // @@protoc_insertion_point(field_set:state.PlayState.deathCount)
}

// int32 roomId = 6;
inline void PlayState::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 PlayState::roomid() const {
  // @@protoc_insertion_point(field_get:state.PlayState.roomId)
  return roomid_;
}
inline void PlayState::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:state.PlayState.roomId)
}

// string clntName = 7;
inline void PlayState::clear_clntname() {
  clntname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayState::clntname() const {
  // @@protoc_insertion_point(field_get:state.PlayState.clntName)
  return clntname_.GetNoArena();
}
inline void PlayState::set_clntname(const ::std::string& value) {
  
  clntname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:state.PlayState.clntName)
}
#if LANG_CXX11
inline void PlayState::set_clntname(::std::string&& value) {
  
  clntname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:state.PlayState.clntName)
}
#endif
inline void PlayState::set_clntname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clntname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:state.PlayState.clntName)
}
inline void PlayState::set_clntname(const char* value, size_t size) {
  
  clntname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:state.PlayState.clntName)
}
inline ::std::string* PlayState::mutable_clntname() {
  
  // @@protoc_insertion_point(field_mutable:state.PlayState.clntName)
  return clntname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayState::release_clntname() {
  // @@protoc_insertion_point(field_release:state.PlayState.clntName)
  
  return clntname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayState::set_allocated_clntname(::std::string* clntname) {
  if (clntname != NULL) {
    
  } else {
    
  }
  clntname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clntname);
  // @@protoc_insertion_point(field_set_allocated:state.PlayState.clntName)
}

// -------------------------------------------------------------------

// HitState

// string from = 1;
inline void HitState::clear_from() {
  from_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HitState::from() const {
  // @@protoc_insertion_point(field_get:state.HitState.from)
  return from_.GetNoArena();
}
inline void HitState::set_from(const ::std::string& value) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:state.HitState.from)
}
#if LANG_CXX11
inline void HitState::set_from(::std::string&& value) {
  
  from_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:state.HitState.from)
}
#endif
inline void HitState::set_from(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:state.HitState.from)
}
inline void HitState::set_from(const char* value, size_t size) {
  
  from_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:state.HitState.from)
}
inline ::std::string* HitState::mutable_from() {
  
  // @@protoc_insertion_point(field_mutable:state.HitState.from)
  return from_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HitState::release_from() {
  // @@protoc_insertion_point(field_release:state.HitState.from)
  
  return from_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HitState::set_allocated_from(::std::string* from) {
  if (from != NULL) {
    
  } else {
    
  }
  from_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from);
  // @@protoc_insertion_point(field_set_allocated:state.HitState.from)
}

// string to = 2;
inline void HitState::clear_to() {
  to_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HitState::to() const {
  // @@protoc_insertion_point(field_get:state.HitState.to)
  return to_.GetNoArena();
}
inline void HitState::set_to(const ::std::string& value) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:state.HitState.to)
}
#if LANG_CXX11
inline void HitState::set_to(::std::string&& value) {
  
  to_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:state.HitState.to)
}
#endif
inline void HitState::set_to(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:state.HitState.to)
}
inline void HitState::set_to(const char* value, size_t size) {
  
  to_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:state.HitState.to)
}
inline ::std::string* HitState::mutable_to() {
  
  // @@protoc_insertion_point(field_mutable:state.HitState.to)
  return to_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HitState::release_to() {
  // @@protoc_insertion_point(field_release:state.HitState.to)
  
  return to_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HitState::set_allocated_to(::std::string* to) {
  if (to != NULL) {
    
  } else {
    
  }
  to_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), to);
  // @@protoc_insertion_point(field_set_allocated:state.HitState.to)
}

// int32 damage = 3;
inline void HitState::clear_damage() {
  damage_ = 0;
}
inline ::google::protobuf::int32 HitState::damage() const {
  // @@protoc_insertion_point(field_get:state.HitState.damage)
  return damage_;
}
inline void HitState::set_damage(::google::protobuf::int32 value) {
  
  damage_ = value;
  // @@protoc_insertion_point(field_set:state.HitState.damage)
}

// -------------------------------------------------------------------

// WorldState

// int32 roomId = 1;
inline void WorldState::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 WorldState::roomid() const {
  // @@protoc_insertion_point(field_get:state.WorldState.roomId)
  return roomid_;
}
inline void WorldState::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.roomId)
}

// string clntName = 2;
inline void WorldState::clear_clntname() {
  clntname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorldState::clntname() const {
  // @@protoc_insertion_point(field_get:state.WorldState.clntName)
  return clntname_.GetNoArena();
}
inline void WorldState::set_clntname(const ::std::string& value) {
  
  clntname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:state.WorldState.clntName)
}
#if LANG_CXX11
inline void WorldState::set_clntname(::std::string&& value) {
  
  clntname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:state.WorldState.clntName)
}
#endif
inline void WorldState::set_clntname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clntname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:state.WorldState.clntName)
}
inline void WorldState::set_clntname(const char* value, size_t size) {
  
  clntname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:state.WorldState.clntName)
}
inline ::std::string* WorldState::mutable_clntname() {
  
  // @@protoc_insertion_point(field_mutable:state.WorldState.clntName)
  return clntname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorldState::release_clntname() {
  // @@protoc_insertion_point(field_release:state.WorldState.clntName)
  
  return clntname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorldState::set_allocated_clntname(::std::string* clntname) {
  if (clntname != NULL) {
    
  } else {
    
  }
  clntname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clntname);
  // @@protoc_insertion_point(field_set_allocated:state.WorldState.clntName)
}

// .state.TransformProto transform = 3;
inline bool WorldState::has_transform() const {
  return this != internal_default_instance() && transform_ != NULL;
}
inline void WorldState::clear_transform() {
  if (GetArenaNoVirtual() == NULL && transform_ != NULL) {
    delete transform_;
  }
  transform_ = NULL;
}
inline const ::state::TransformProto& WorldState::_internal_transform() const {
  return *transform_;
}
inline const ::state::TransformProto& WorldState::transform() const {
  const ::state::TransformProto* p = transform_;
  // @@protoc_insertion_point(field_get:state.WorldState.transform)
  return p != NULL ? *p : *reinterpret_cast<const ::state::TransformProto*>(
      &::state::_TransformProto_default_instance_);
}
inline ::state::TransformProto* WorldState::release_transform() {
  // @@protoc_insertion_point(field_release:state.WorldState.transform)
  
  ::state::TransformProto* temp = transform_;
  transform_ = NULL;
  return temp;
}
inline ::state::TransformProto* WorldState::mutable_transform() {
  
  if (transform_ == NULL) {
    auto* p = CreateMaybeMessage<::state::TransformProto>(GetArenaNoVirtual());
    transform_ = p;
  }
  // @@protoc_insertion_point(field_mutable:state.WorldState.transform)
  return transform_;
}
inline void WorldState::set_allocated_transform(::state::TransformProto* transform) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete transform_;
  }
  if (transform) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      transform = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    
  } else {
    
  }
  transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:state.WorldState.transform)
}

// bool fired = 4;
inline void WorldState::clear_fired() {
  fired_ = false;
}
inline bool WorldState::fired() const {
  // @@protoc_insertion_point(field_get:state.WorldState.fired)
  return fired_;
}
inline void WorldState::set_fired(bool value) {
  
  fired_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.fired)
}

// int32 health = 5;
inline void WorldState::clear_health() {
  health_ = 0;
}
inline ::google::protobuf::int32 WorldState::health() const {
  // @@protoc_insertion_point(field_get:state.WorldState.health)
  return health_;
}
inline void WorldState::set_health(::google::protobuf::int32 value) {
  
  health_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.health)
}

// bool hit = 6;
inline void WorldState::clear_hit() {
  hit_ = false;
}
inline bool WorldState::hit() const {
  // @@protoc_insertion_point(field_get:state.WorldState.hit)
  return hit_;
}
inline void WorldState::set_hit(bool value) {
  
  hit_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.hit)
}

// .state.HitState hitState = 7;
inline bool WorldState::has_hitstate() const {
  return this != internal_default_instance() && hitstate_ != NULL;
}
inline void WorldState::clear_hitstate() {
  if (GetArenaNoVirtual() == NULL && hitstate_ != NULL) {
    delete hitstate_;
  }
  hitstate_ = NULL;
}
inline const ::state::HitState& WorldState::_internal_hitstate() const {
  return *hitstate_;
}
inline const ::state::HitState& WorldState::hitstate() const {
  const ::state::HitState* p = hitstate_;
  // @@protoc_insertion_point(field_get:state.WorldState.hitState)
  return p != NULL ? *p : *reinterpret_cast<const ::state::HitState*>(
      &::state::_HitState_default_instance_);
}
inline ::state::HitState* WorldState::release_hitstate() {
  // @@protoc_insertion_point(field_release:state.WorldState.hitState)
  
  ::state::HitState* temp = hitstate_;
  hitstate_ = NULL;
  return temp;
}
inline ::state::HitState* WorldState::mutable_hitstate() {
  
  if (hitstate_ == NULL) {
    auto* p = CreateMaybeMessage<::state::HitState>(GetArenaNoVirtual());
    hitstate_ = p;
  }
  // @@protoc_insertion_point(field_mutable:state.WorldState.hitState)
  return hitstate_;
}
inline void WorldState::set_allocated_hitstate(::state::HitState* hitstate) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete hitstate_;
  }
  if (hitstate) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      hitstate = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, hitstate, submessage_arena);
    }
    
  } else {
    
  }
  hitstate_ = hitstate;
  // @@protoc_insertion_point(field_set_allocated:state.WorldState.hitState)
}

// int32 killPoint = 8;
inline void WorldState::clear_killpoint() {
  killpoint_ = 0;
}
inline ::google::protobuf::int32 WorldState::killpoint() const {
  // @@protoc_insertion_point(field_get:state.WorldState.killPoint)
  return killpoint_;
}
inline void WorldState::set_killpoint(::google::protobuf::int32 value) {
  
  killpoint_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.killPoint)
}

// int32 deathPoint = 9;
inline void WorldState::clear_deathpoint() {
  deathpoint_ = 0;
}
inline ::google::protobuf::int32 WorldState::deathpoint() const {
  // @@protoc_insertion_point(field_get:state.WorldState.deathPoint)
  return deathpoint_;
}
inline void WorldState::set_deathpoint(::google::protobuf::int32 value) {
  
  deathpoint_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.deathPoint)
}

// int32 animState = 10;
inline void WorldState::clear_animstate() {
  animstate_ = 0;
}
inline ::google::protobuf::int32 WorldState::animstate() const {
  // @@protoc_insertion_point(field_get:state.WorldState.animState)
  return animstate_;
}
inline void WorldState::set_animstate(::google::protobuf::int32 value) {
  
  animstate_ = value;
  // @@protoc_insertion_point(field_set:state.WorldState.animState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace state

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_PlayState_2eproto
